import { UnitOfWork } from "../repositories/unitOfWork";
import { ServiceResult, ServiceResultBuilder } from "../types/serviceResult";
import { TKBWeeklyItemDTO } from "../dtos/giangVienDTO";

export class GiangVienService {
    private uow = UnitOfWork.getInstance();

    /**
     * Ki·ªÉm tra gi·∫£ng vi√™n c√≥ quy·ªÅn v·ªõi l·ªõp h·ªçc ph·∫ßn
     */
    private async assertOwnsLHP(lhpId: string, gvUserId: string): Promise<void> {
        const lhp = await this.uow.lopHocPhanRepository.findById(lhpId);

        if (!lhp) {
            throw new Error("L·ªõp h·ªçc ph·∫ßn kh√¥ng t·ªìn t·∫°i");
        }

        if (lhp.giang_vien_id !== gvUserId) {
            throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p l·ªõp h·ªçc ph·∫ßn n√†y");
        }
    }

    /**
     * L·∫•y danh s√°ch l·ªõp h·ªçc ph·∫ßn c·ªßa gi·∫£ng vi√™n
     */
    async getMyLopHocPhan(gvUserId: string): Promise<ServiceResult<any[]>> {
        try {
            const lops = await this.uow.lopHocPhanRepository.byGiangVien(gvUserId);
            return ServiceResultBuilder.success("L·∫•y danh s√°ch l·ªõp h·ªçc ph·∫ßn th√†nh c√¥ng", lops);
        } catch (error) {
            console.error("Error getting lop hoc phan:", error);
            return ServiceResultBuilder.failure("L·ªói khi l·∫•y danh s√°ch l·ªõp h·ªçc ph·∫ßn", "INTERNAL_ERROR");
        }
    }

    /**
     * L·∫•y TKB theo kho·∫£ng th·ªùi gian c·ªßa gi·∫£ng vi√™n
     */
    async getTKBWeekly(gvUserId: string, hocKyId: string, dateStart: Date, dateEnd: Date): Promise<ServiceResult<TKBWeeklyItemDTO[]>> {
        try {
            console.log('\nüîç ====== DEBUG TKB WEEKLY ======');
            console.log('üìÖ Input params:');
            console.log('  - GV User ID:', gvUserId);
            console.log('  - Hoc Ky ID:', hocKyId);
            console.log('  - Date Start:', dateStart);
            console.log('  - Date End:', dateEnd);

            const lopHocPhans = await this.uow.lopHocPhanRepository.findByGiangVienAndHocKy(gvUserId, hocKyId);

            console.log('\nüìö L·ªõp h·ªçc ph·∫ßn t√¨m ƒë∆∞·ª£c:', lopHocPhans.length);
            if (lopHocPhans.length === 0) {
                console.log('‚ö†Ô∏è KH√îNG C√ì L·ªöP H·ªåC PH·∫¶N N√ÄO!');
                return ServiceResultBuilder.success("L·∫•y th·ªùi kh√≥a bi·ªÉu th√†nh c√¥ng", []);
            }

            lopHocPhans.forEach((lop: any, idx: number) => {
                console.log(`\n  L·ªõp ${idx + 1}:`);
                console.log(`    - ID: ${lop.id}`);
                console.log(`    - M√£ l·ªõp: ${lop.ma_lop}`);
                console.log(`    - M√¥n h·ªçc: ${lop.hoc_phan?.mon_hoc?.ma_mon} - ${lop.hoc_phan?.mon_hoc?.ten_mon}`);
                console.log(`    - S·ªë l·ªãch h·ªçc: ${lop.lich_hoc_dinh_ky?.length || 0}`);
            });

            const tkbItems: TKBWeeklyItemDTO[] = [];
            const startDate = new Date(dateStart);
            const endDate = new Date(dateEnd);

            console.log('\n‚è∞ X·ª≠ l√Ω l·ªãch h·ªçc:');
            console.log(`  - T·ª´: ${startDate.toISOString()}`);
            console.log(`  - ƒê·∫øn: ${endDate.toISOString()}`);

            for (const lop of lopHocPhans) {
                console.log(`\n  üìñ Processing l·ªõp: ${lop.ma_lop}`);

                if (!lop.lich_hoc_dinh_ky || lop.lich_hoc_dinh_ky.length === 0) {
                    console.log('    ‚ö†Ô∏è L·ªõp n√†y KH√îNG C√ì l·ªãch h·ªçc ƒë·ªãnh k·ª≥!');
                    continue;
                }

                for (const lich of lop.lich_hoc_dinh_ky) {
                    console.log(`\n    üìÖ L·ªãch: Th·ª© ${lich.thu}, ti·∫øt ${lich.tiet_bat_dau}-${lich.tiet_ket_thuc}`);
                    console.log(`       Ph√≤ng: ${lich.phong?.ma_phong || 'Ch∆∞a c√≥'}`);

                    let matchCount = 0;
                    const currentDate = new Date(startDate);

                    while (currentDate <= endDate) {
                        const dayOfWeek = currentDate.getDay();
                        const thu = dayOfWeek === 0 ? 1 : dayOfWeek + 1;

                        if (thu === lich.thu) {
                            matchCount++;
                            console.log(`       ‚úÖ Match: ${currentDate.toISOString().split('T')[0]} (Th·ª© ${thu})`);

                            tkbItems.push({
                                thu: lich.thu,
                                tiet_bat_dau: lich.tiet_bat_dau,
                                tiet_ket_thuc: lich.tiet_ket_thuc,
                                phong: {
                                    id: lich.phong?.id || "",
                                    ma_phong: lich.phong?.ma_phong || "",
                                },
                                lop_hoc_phan: {
                                    id: lop.id,
                                    ma_lop: lop.ma_lop,
                                },
                                mon_hoc: {
                                    ma_mon: lop.hoc_phan.mon_hoc.ma_mon,
                                    ten_mon: lop.hoc_phan.mon_hoc.ten_mon,
                                },
                                ngay_hoc: new Date(currentDate),
                            });
                        }

                        currentDate.setDate(currentDate.getDate() + 1);
                    }

                    console.log(`       üìä T·ªïng match: ${matchCount} bu·ªïi`);
                }
            }

            console.log('\n‚úÖ T·ªïng s·ªë bu·ªïi h·ªçc t√¨m ƒë∆∞·ª£c:', tkbItems.length);

            tkbItems.sort((a, b) => {
                if (a.ngay_hoc && b.ngay_hoc) {
                    const dateCompare = a.ngay_hoc.getTime() - b.ngay_hoc.getTime();
                    if (dateCompare !== 0) return dateCompare;
                }
                return a.tiet_bat_dau - b.tiet_bat_dau;
            });

            console.log('====== END DEBUG ======\n');

            return ServiceResultBuilder.success("L·∫•y th·ªùi kh√≥a bi·ªÉu th√†nh c√¥ng", tkbItems);
        } catch (error) {
            console.error("‚ùå Error getting TKB weekly:", error);
            return ServiceResultBuilder.failure("L·ªói khi l·∫•y th·ªùi kh√≥a bi·ªÉu", "INTERNAL_ERROR");
        }
    }

    /**
     * L·∫•y chi ti·∫øt l·ªõp h·ªçc ph·∫ßn
     */
    async getLopHocPhanDetail(lhpId: string, gvUserId: string): Promise<ServiceResult<any>> {
        try {
            await this.assertOwnsLHP(lhpId, gvUserId);
            const lhp = await this.uow.lopHocPhanRepository.detail(lhpId);
            return ServiceResultBuilder.success("L·∫•y th√¥ng tin l·ªõp h·ªçc ph·∫ßn th√†nh c√¥ng", lhp);
        } catch (error: any) {
            console.error("Error getting lop hoc phan detail:", error);
            return ServiceResultBuilder.failure(error.message || "L·ªói khi l·∫•y th√¥ng tin l·ªõp h·ªçc ph·∫ßn", "INTERNAL_ERROR");
        }
    }

    /**
     * L·∫•y danh s√°ch sinh vi√™n trong l·ªõp
     */
    async getStudentsOfLHP(lhpId: string, gvUserId: string): Promise<ServiceResult<any[]>> {
        try {
            await this.assertOwnsLHP(lhpId, gvUserId);

            const students = await this.uow.lopHocPhanRepository.studentsOfLHP(lhpId);

            const data = students.map((d: any) => ({
                sinh_vien_id: d.sinh_vien_id,
                mssv: d.sinh_vien.ma_so_sinh_vien,
                ho_ten: d.sinh_vien.users.ho_ten,
                email: d.sinh_vien.users.email,
                lop: d.sinh_vien.lop,
                khoa: d.sinh_vien.khoa.ten_khoa,
                nganh: d.sinh_vien.nganh_hoc?.ten_nganh ?? null,
            }));

            return ServiceResultBuilder.success("L·∫•y danh s√°ch sinh vi√™n th√†nh c√¥ng", data);
        } catch (error: any) {
            console.error("Error getting students:", error);
            return ServiceResultBuilder.failure(error.message || "L·ªói khi l·∫•y danh s√°ch sinh vi√™n", "INTERNAL_ERROR");
        }
    }
}
