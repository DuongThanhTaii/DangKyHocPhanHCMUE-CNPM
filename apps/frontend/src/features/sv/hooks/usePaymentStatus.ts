import { useState, useEffect } from "react";
import { svApi } from "../api/svApi";
import type { PaymentStatusResponse } from "../types";

/**
 * ‚úÖ Hook poll payment status (every 1s)
 * ‚úÖ Stop polling when status is final (success, failed, cancelled)
 */
export const usePaymentStatus = (
    orderId: string,
    maxAttempts = 20, // ‚úÖ TƒÉng t·ª´ 15 ‚Üí 20
    interval = 1000,
    initialDelay = 2000 // ‚úÖ TH√äM: ƒê·ª£i 2s tr∆∞·ªõc khi poll l·∫ßn ƒë·∫ßu
) => {
    const [status, setStatus] = useState<PaymentStatusResponse | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (!orderId) {
            setLoading(false);
            setError("Kh√¥ng c√≥ m√£ ƒë∆°n h√†ng");
            return;
        }

        let attempts = 0;
        let intervalId: ReturnType<typeof setInterval>;
        let initialTimeoutId: ReturnType<typeof setTimeout>;

        const checkStatus = async () => {
            attempts++;

            console.log(`üîç Polling payment status (${attempts}/${maxAttempts})...`);

            try {
                const result = await svApi.getPaymentStatus(orderId);

                if (result.isSuccess && result.data) {
                    const currentStatus = result.data.status;

                    console.log(`üì¶ Payment status: ${currentStatus}`);

                    setStatus(result.data);

                    // ‚úÖ Stop polling if final status
                    if (
                        currentStatus === "success" ||
                        currentStatus === "failed" ||
                        currentStatus === "cancelled"
                    ) {
                        console.log("‚úÖ Final status reached");
                        clearInterval(intervalId);
                        setLoading(false);
                        return true; // ‚úÖ Signal success
                    }
                } else {
                    console.warn(`‚ö†Ô∏è API error: ${result.message}`);
                }

                return false; // Continue polling
            } catch (err: any) {
                console.error("‚ùå Error checking payment:", err);
                // ‚úÖ Don't stop on first error - retry
                return false;
            }
        };

        const startPolling = () => {
            // ‚úÖ First check immediately (after initial delay)
            checkStatus().then((shouldStop) => {
                if (shouldStop) return;

                // ‚úÖ Start interval polling
                intervalId = setInterval(async () => {
                    const shouldStop = await checkStatus();

                    if (shouldStop || attempts >= maxAttempts) {
                        clearInterval(intervalId);
                        setLoading(false);

                        if (attempts >= maxAttempts && status?.status === "pending") {
                            setError("Kh√¥ng th·ªÉ x√°c nh·∫≠n k·∫øt qu·∫£. Vui l√≤ng ki·ªÉm tra l·∫°i sau.");
                        }
                    }
                }, interval);
            });
        };

        // ‚úÖ Add initial delay before first poll
        console.log(`‚è≥ Waiting ${initialDelay}ms before polling...`);
        initialTimeoutId = setTimeout(startPolling, initialDelay);

        // ‚úÖ Cleanup
        return () => {
            clearTimeout(initialTimeoutId);
            if (intervalId) clearInterval(intervalId);
        };
    }, [orderId, maxAttempts, interval, initialDelay]);

    return { status, loading, error };
};
